import {validateRow, validateColumn, getSubGrid,validateSubgrid,getColumn, getPossibleNumbers} from './index'

describe("test for the validateRow function", () => {
    it('returns false if the row is not valid', () => {
        expect(validateRow([[0,8,7,0,1,0,0,3,1]], 0)).toBe(false);
        expect(validateRow([[1,8,7,0,0,0,0,3,1]], 0)).toBe(false);
        expect(validateRow([[1,8,7,0,0,0,0,3,1], [0, 0, 3, 0, 1, 0, 0, 8, 0]], 0)).toBe(false);
        expect(validateRow([[0,8,7,0,0,0,0,3,1], [8, 0, 3, 0, 1, 0, 0, 8, 0]], 1)).toBe(false);
        expect(
            validateRow(
                [
                    [0,8,7,0,0,0,0,3,1],
                    [0, 0, 3, 0, 1, 0, 0, 8, 0],
                    [0, 0, 3, 0, 1, 0, 0, 8, 8]
                ],
                2
            )
        )
            .toBe(false);
    })
    it("returns true", () => {
        expect(validateRow([[0,8,7,0,0,0,0,3,1]], 0)).toBe(true);
        expect(validateRow([[0,8,7,0,0,0,0,3,1], [0, 0, 3, 0, 1, 0, 0, 8, 0]], 0)).toBe(true);

        expect(
            validateRow(
                [
                    [0, 8, 7, 0, 0, 0, 0, 3, 1],
                    [0, 0, 3, 0, 1, 0, 0, 8, 0],
                    [0, 0, 3, 0, 1, 0, 0, 8, 0]
                ],
                0
            )
        )
            .toBe(true);
        expect(
            validateRow(
                [
                    [0, 0, 0, 0, 0, 0, 0, 0, 0],
                    [0, 0, 3, 0, 1, 0, 0, 8, 0],
                    [0, 0, 3, 0, 1, 0, 0, 8, 0]
                ],
                0
            )
        )
            .toBe(true);
    })
})

describe('tests for the validateColumn function',() => {
    it('returns false', () => {
        expect(validateColumn([
            [3, 0, 6, 5, 0, 8, 4, 0, 0],
            [5, 2, 0, 0, 0, 0, 0, 0, 0],
            [3, 8, 7, 0, 0, 0, 0, 3, 1],
            [0, 0, 3, 0, 1, 0, 0, 8, 0]
        ],
            0
        )).toBe(false)
        expect(validateColumn([
                [3, 0, 6, 5, 0, 8, 4, 0, 0],
                [5, 2, 0, 0, 0, 0, 0, 0, 0],
                [0, 8, 7, 0, 0, 0, 0, 3, 1],
                [0, 0, 7, 0, 1, 0, 0, 8, 0]
            ],
            2
        )).toBe(false)
        expect(validateColumn([
                [3, 0, 6, 5, 0, 8, 4, 0, 1],
                [5, 2, 0, 0, 0, 0, 0, 0, 0],
                [3, 8, 7, 0, 0, 0, 0, 3, 1],
                [0, 0, 3, 0, 1, 0, 0, 8, 0]
            ],
            8
        )).toBe(false)
    })
    it('returns true', () => {
        expect(validateColumn([
                [0, 0, 6, 5, 0, 8, 4, 0, 0],
                [5, 2, 0, 0, 0, 0, 0, 0, 0],
                [3, 8, 7, 0, 0, 0, 0, 3, 1],
                [0, 0, 3, 0, 1, 0, 0, 8, 0]
            ],
            0
        )).toBe(true)
        expect(validateColumn([
                [3, 0, 6, 5, 0, 8, 4, 0, 0],
                [5, 2, 0, 0, 0, 0, 0, 0, 0],
                [0, 8, 7, 0, 0, 0, 0, 3, 1],
                [0, 0, 0, 0, 1, 0, 0, 8, 0]
            ],
            2
        )).toBe(true)
        expect(validateColumn([
                [3, 0, 6, 5, 0, 8, 4, 0, 1],
                [5, 2, 0, 0, 0, 0, 0, 0, 0],
                [3, 8, 7, 0, 0, 0, 0, 3, 6],
                [0, 0, 3, 0, 1, 0, 0, 8, 0]
            ],
            8
        )).toBe(true)
    })
})

describe("tests for the getSubGrid function", () => {
    it('returns sub grid', () => {
        expect(getSubGrid(
            [
                [3, 0, 6, 5, 0, 8, 4, 0, 0],
                [5, 2, 0, 0, 0, 0, 0, 0, 0],
                [0, 8, 7, 0, 0, 0, 0, 3, 1],
                [0, 1, 2, 0, 0, 7, 6, 5, 0],
                [3, 0, 6, 5, 0, 8, 4, 0, 0],
                [5, 2, 0, 0, 0, 0, 0, 0, 0],
                [0, 8, 7, 0, 0, 0, 0, 3, 1],
                [0, 1, 2, 0, 0, 7, 6, 5, 0],
                [0, 1, 2, 0, 0, 7, 6, 5, 0]
            ], 0,0
        )).toStrictEqual([3,0,6,5,2,0,0,8,7])
        expect(getSubGrid(
            [
                [3, 0, 6, 5, 0, 8, 4, 0, 0],
                [5, 2, 0, 0, 0, 0, 0, 0, 0],
                [0, 8, 7, 0, 0, 0, 0, 3, 1],
                [0, 1, 2, 0, 0, 7, 6, 5, 0],
                [3, 0, 6, 5, 0, 8, 4, 0, 0],
                [5, 2, 0, 0, 0, 0, 0, 0, 0],
                [0, 8, 7, 0, 0, 0, 0, 3, 1],
                [0, 1, 2, 0, 0, 7, 6, 5, 0],
                [0, 1, 2, 0, 0, 7, 6, 5, 0]
            ], 1,0
        )).toStrictEqual([3,0,6,5,2,0,0,8,7])
        expect(getSubGrid(
            [
                [3, 0, 6, 5, 0, 8, 4, 0, 0],
                [5, 2, 0, 0, 0, 0, 0, 0, 0],
                [0, 8, 7, 0, 0, 0, 0, 3, 1],
                [0, 1, 2, 0, 0, 7, 6, 5, 0],
                [3, 0, 6, 5, 0, 8, 4, 0, 0],
                [5, 2, 0, 0, 0, 0, 0, 0, 0],
                [0, 8, 7, 0, 0, 0, 0, 3, 1],
                [0, 1, 2, 0, 0, 7, 6, 5, 0],
                [0, 1, 2, 0, 0, 7, 6, 5, 0]
            ], 3,0
        )).toStrictEqual([0,1,2,3,0,6,5,2,0])
        expect(getSubGrid(
            [
                [3, 0, 6, 5, 0, 8, 4, 0, 0],
                [5, 2, 0, 0, 0, 0, 0, 0, 0],
                [0, 8, 7, 0, 0, 0, 0, 3, 1],
                [0, 1, 2, 0, 0, 7, 6, 5, 0],
                [3, 0, 6, 5, 0, 8, 4, 0, 0],
                [5, 2, 0, 0, 0, 0, 0, 0, 0],
                [0, 8, 7, 0, 0, 0, 0, 3, 1],
                [0, 1, 2, 0, 0, 7, 6, 5, 0],
                [0, 1, 2, 0, 0, 7, 6, 5, 0]
            ], 0,3
        )).toStrictEqual([5,0,8,0,0,0,0,0,0])
        expect(getSubGrid(
            [
                [3, 0, 6, 5, 0, 8, 4, 0, 0],
                [5, 2, 0, 0, 0, 0, 0, 0, 0],
                [0, 8, 7, 0, 0, 0, 0, 3, 1],
                [0, 1, 2, 0, 0, 7, 6, 5, 0],
                [3, 0, 6, 5, 0, 8, 4, 0, 0],
                [5, 2, 0, 0, 0, 0, 0, 0, 0],
                [0, 8, 7, 0, 0, 0, 0, 3, 1],
                [0, 1, 2, 0, 0, 7, 6, 5, 0],
                [0, 1, 2, 0, 0, 7, 6, 5, 0]
            ], 4,4
        )).toStrictEqual([0,0,7,5,0,8,0,0,0])
        expect(getSubGrid(
            [
                [3, 0, 6, 5, 0, 8, 4, 0, 0],
                [5, 2, 0, 0, 0, 0, 0, 0, 0],
                [0, 8, 7, 0, 0, 0, 0, 3, 1],
                [0, 1, 2, 0, 0, 7, 6, 5, 0],
                [3, 0, 6, 5, 0, 8, 4, 0, 0],
                [5, 2, 0, 0, 0, 0, 0, 0, 0],
                [0, 8, 7, 0, 0, 0, 0, 3, 1],
                [0, 1, 2, 0, 0, 7, 6, 5, 0],
                [0, 1, 2, 0, 0, 7, 6, 5, 0],
            ], 6,3
        )).toStrictEqual([0,0,0,0,0,7,0,0,7])
        expect(getSubGrid(
            [
                [3, 0, 6, 5, 0, 8, 4, 0, 0],
                [5, 2, 0, 0, 0, 0, 0, 0, 0],
                [0, 8, 7, 0, 0, 0, 0, 3, 1],
                [0, 1, 2, 0, 0, 7, 6, 5, 0],
                [3, 0, 6, 5, 0, 8, 4, 0, 0],
                [5, 2, 0, 0, 0, 0, 0, 0, 0],
                [0, 8, 7, 0, 0, 0, 0, 3, 1],
                [0, 1, 2, 0, 0, 7, 6, 5, 0],
                [0, 1, 2, 0, 0, 7, 6, 5, 1],
            ], 9,9
        )).toStrictEqual([0,3,1,6,5,0,6,5,1])
    })
})

describe("tests for the validateSubGrid function", () => {
    it('returns false', () => {
        expect(validateSubgrid(getSubGrid(
            [
                [3, 0, 6, 5, 0, 8, 4, 0, 0],
                [5, 2, 0, 0, 0, 0, 0, 0, 0],
                [0, 8, 7, 0, 0, 0, 0, 3, 1],
                [0, 1, 2, 0, 0, 7, 6, 5, 0],
                [3, 0, 6, 5, 0, 8, 4, 0, 0],
                [5, 2, 0, 0, 0, 0, 0, 0, 0],
                [0, 8, 7, 0, 0, 0, 0, 3, 1],
                [0, 1, 2, 0, 0, 7, 6, 5, 0],
                [0, 1, 2, 0, 0, 7, 6, 5, 1],
            ], 9,9
        ))).toBe(false)
    })
    it("returns true", () => {
        expect(validateSubgrid(
            getSubGrid(
                [
                    [3, 0, 6, 5, 0, 8, 4, 0, 0],
                    [5, 2, 0, 0, 0, 0, 0, 0, 0],
                    [0, 8, 7, 0, 0, 0, 0, 3, 1],
                    [0, 1, 2, 0, 0, 7, 6, 5, 0],
                    [3, 0, 6, 5, 0, 8, 4, 0, 0],
                    [5, 2, 0, 0, 0, 0, 0, 0, 0],
                    [0, 8, 7, 0, 0, 0, 0, 3, 1],
                    [0, 1, 2, 0, 0, 7, 6, 5, 0],
                    [0, 1, 2, 0, 0, 7, 6, 5, 0]
                ], 4,4
            )
        )).toBe(true)
    })
})

describe("tests for the getColumn function", () => {
    it("returns column array", () => {
        expect(getColumn(
            [
                [3, 0, 6, 5, 0, 8, 4, 0, 0],
                [5, 2, 0, 0, 0, 0, 0, 0, 0],
                [0, 8, 7, 0, 0, 0, 0, 3, 1],
                [0, 1, 2, 0, 0, 7, 6, 5, 0],
                [3, 0, 6, 5, 0, 8, 4, 0, 0],
                [5, 2, 0, 0, 0, 0, 0, 0, 0],
                [0, 8, 7, 0, 0, 0, 0, 3, 1],
                [0, 1, 2, 0, 0, 7, 6, 5, 0],
                [0, 1, 2, 0, 0, 7, 6, 5, 0]
            ], 5
        )).toStrictEqual([8,0,0,7,8,0,0,7,7])
        expect(getColumn(
            [
                [3, 0, 6, 5, 0, 8, 4, 0, 0],
                [5, 2, 0, 0, 0, 0, 0, 0, 0],
                [0, 8, 7, 0, 0, 0, 0, 3, 1],
                [0, 1, 2, 0, 0, 7, 6, 5, 0],
                [3, 0, 6, 5, 0, 8, 4, 0, 0],
                [5, 2, 0, 0, 0, 0, 0, 0, 0],
                [0, 8, 7, 0, 0, 0, 0, 3, 1],
                [0, 1, 2, 0, 0, 7, 6, 5, 0],
                [0, 1, 2, 0, 0, 7, 3, 5, 0]
            ], 3
        )).toStrictEqual([5,0,0,0,5,0,0,0,0])
    })
})

describe("tests for the getPossibleNumbers function", () => {
    it('returns possible numbers', () => {
        expect(getPossibleNumbers(
            [
                [3, 0, 6, 5, 0, 8, 4, 0, 0],
                [5, 2, 0, 0, 0, 0, 0, 0, 0],
                [0, 8, 7, 0, 0, 0, 0, 3, 1],
                [0, 1, 2, 0, 0, 7, 6, 5, 0],
                [3, 0, 6, 5, 0, 8, 4, 0, 0],
                [5, 2, 0, 0, 0, 0, 0, 0, 0],
                [0, 8, 7, 0, 0, 0, 0, 3, 1],
                [0, 1, 2, 0, 0, 7, 6, 5, 0],
                [0, 1, 2, 0, 0, 7, 3, 5, 4]
            ], 0,0
        )).toStrictEqual([1,9])
    })
})